créer un répertoire réact :

npx create-react-app first-project
(Ctrl + C pour arrêter )

rfce will create automaticaly a new react function

import {useState} from "react";

//un composant réact est composé de 3 box :
function App() {
  // state(état, données)
  const [compteur, setCompteur] = useState(1);

/* definir un state initialisé à 1 et sauve dans compteur
et qui ne peut être modifié qu'à travers setCompteur*/

  //comportements (idem funct (fct fléché))
  const handleClick = () => {
    //alert("handleClick");  //make sure the comportment is connect to the render
    setCompteur(compteur + 1);
   };

   const hClick = () => {
    setCompteur(compteur - 1);
   };
  
  //affichage (render)
  return (
    <div>
       <h1> {compteur} </h1>
      <button onClick={handleClick}> Incrémente</button>
      <button onClick={hClick}> Décremente</button>
    </div>
  );
}

export default App;




LISTE EN REACT

import {useState} from "react";

function App() {
  // state
  const [fruits, setFruits] = useState([
    {id:1, name: "Abricot"},
    {id:2, name: "Banane"},
    {id:3, name: "Cerise"},
    {id:4, name: "Mangue"},
    {id:5, name: "Orange"}
  ]); 

  //compotments 
  const handleDelete = (id) => {
    //1. copie du state
    //const fruitsCopy = fruits.slice();
    const fruitsCopy = [...fruits];

    //2. manipuler mon state
    const fruitsCopyUpdated = fruitsCopy.filter(fruit => fruit.id !== id)

    //3. modifier mon state avec le setter
    setFruits(fruitsCopyUpdated);
  }
  
  //render
  return (
    <div>
       <h1>Liste de fruits</h1>
       <ul>
        {fruits.map((fruit) => (
        <li key={fruit.id}>
          {fruit.name} <button onClick={() => handleDelete(fruit.id)}>x</button>
          </li>
        ))}
       </ul>
    </div>
  );
}

export default App;


GESTION FORMULAIRE EN REACT


